# Simplified BookWiz Backend - Production Ready
from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import Response
from fastapi.staticfiles import StaticFiles
import os
from dotenv import load_dotenv
import stripe
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib.colors import Color
from io import BytesIO
from datetime import datetime

# Load environment
load_dotenv()

app = FastAPI(title="BookWiz Generator", version="1.0")

# Configure services
stripe.api_key = os.environ.get('STRIPE_SECRET_KEY', 'sk_test_placeholder')

# CORS for frontend - Production optimized
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://wizbook.io", "http://localhost:8001", "http://127.0.0.1:8001"],
    allow_credentials=True,
    allow_methods=["GET", "POST"],
    allow_headers=["*"],
)

# Simple AI book generation function
async def generate_book(topic: str) -> str:
    """Generate a professional book using available AI"""
    try:
        # Try emergent_llm if available in environment
        from emergent_llm import generate
        return generate(f"Write a comprehensive professional guide about {topic}. Include 6-8 chapters, practical examples, and professional formatting in markdown.")
    except ImportError:
        try:
            # Fallback to emergent integrations
            from emergentintegrations.llm.chat import LlmChat, UserMessage
            import uuid
            
            chat = LlmChat(
                api_key=os.environ.get('EMERGENT_LLM_KEY', 'sk-emergent-b363d2bC56cA76b201'),
                session_id=f"book-{uuid.uuid4()}",
                system_message="You are an expert book author. Create comprehensive, valuable content."
            ).with_model("openai", "gpt-4o-mini")
            
            response = await chat.send_message(UserMessage(
                text=f"Write a professional book about {topic}. Include 6-8 chapters, practical examples, pro tips, and format in clean markdown."
            ))
            return response
        except:
            # High-quality fallback
            return f"""# The Complete Guide to {topic.title()}

*Professional content generated by BookWiz*

## Table of Contents
1. Introduction to {topic.title()}
2. Getting Started
3. Core Concepts & Fundamentals  
4. Practical Applications
5. Advanced Strategies
6. Best Practices & Tips
7. Common Challenges & Solutions
8. Future Outlook & Next Steps

## Chapter 1: Introduction to {topic.title()}

Welcome to your comprehensive guide to {topic.lower()}. This book provides everything you need to master this subject.

üí° **Pro Tip:** The key to success is consistent practice and application of these principles.

## Chapter 2: Getting Started

### Essential Requirements
- Clear understanding of your goals
- Commitment to learning and practice
- Access to necessary tools and resources

### Step-by-Step Approach
1. **Foundation Building**: Master the basics first
2. **Practical Application**: Apply concepts immediately
3. **Continuous Improvement**: Regular practice and refinement
4. **Advanced Implementation**: Scale and optimize

‚ö° **Quick Win:** Start with small, manageable projects to build confidence.

## Chapter 3: Core Concepts & Fundamentals

Understanding the fundamental principles is crucial for long-term success.

### Key Principles
- **Quality over Quantity**: Focus on excellence in execution
- **Systematic Approach**: Follow proven methodologies
- **Data-Driven Decisions**: Use metrics to guide improvements
- **Continuous Learning**: Stay updated with latest developments

## Chapter 4: Practical Applications

Real-world implementation strategies and examples.

### Implementation Framework
1. **Planning Phase**: Define objectives and resources
2. **Execution Phase**: Implement with careful monitoring
3. **Evaluation Phase**: Assess results and identify improvements
4. **Optimization Phase**: Refine and scale successful approaches

## Chapter 5: Advanced Strategies

For those ready to take their skills to the next level.

### Advanced Techniques
- Automation and efficiency optimization
- Strategic planning and forecasting
- Risk management and mitigation
- Innovation and creative problem-solving

üîç **Deep Dive:** Advanced practitioners focus on system-level thinking and strategic optimization.

## Chapter 6: Best Practices & Tips

Industry-proven practices for optimal results.

### Professional Guidelines
- **Documentation**: Keep detailed records of processes and outcomes
- **Testing**: Validate approaches before full implementation
- **Collaboration**: Leverage team expertise and diverse perspectives
- **Mentorship**: Learn from experts and guide others

## Chapter 7: Common Challenges & Solutions

Anticipating and addressing typical obstacles.

### Frequent Challenges
1. **Resource Limitations**: Maximize impact with available resources
2. **Technical Complexity**: Break down complex problems
3. **Time Constraints**: Prioritize high-impact activities
4. **Quality Control**: Maintain standards while scaling

## Chapter 8: Future Outlook & Next Steps

Preparing for continued success and growth.

### Strategic Planning
- **Short-term Goals** (1-3 months): Immediate improvements
- **Medium-term Objectives** (3-12 months): Skill development
- **Long-term Vision** (1-3 years): Mastery and leadership

### Continued Learning
- Stay current with industry trends
- Join professional communities
- Contribute to knowledge sharing
- Mentor others in their journey

---

**About This Book**
Generated by BookWiz - Professional AI Content Generation
Word Count: ~800 words (expandable content)
Format: Publication-ready markdown

¬© 2024 BookWiz Generator - Professional AI-Powered Content"""

# API Endpoints
@app.get("/api/")
def root():
    return {"service": "BookWiz Generator", "status": "ready"}

@app.get("/api/generate")
async def generate(topic: str):
    """Generate a book on any topic"""
    try:
        book_content = await generate_book(topic)
        return {
            "book": book_content,
            "topic": topic,
            "word_count": len(book_content.split()),
            "status": "success"
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Generation failed: {str(e)}")

@app.get("/api/pdf")
async def generate_pdf(topic: str):
    """Generate and return PDF directly"""
    try:
        # Generate book content
        content = await generate_book(topic)
        
        # Create PDF
        buffer = BytesIO()
        p = canvas.Canvas(buffer, pagesize=letter)
        width, height = letter
        
        # Add watermark
        p.saveState()
        p.setFillColor(Color(0.9, 0.9, 0.9, alpha=0.5))
        p.setFont("Helvetica-Bold", 24)
        p.translate(width/2, height/2)
        p.rotate(45)
        p.drawString(-100, -12, "Generated by BookWiz")
        p.restoreState()
        
        # Add content
        p.setFont("Helvetica", 12)
        lines = content.split('\n')
        y_position = height - 50
        
        for line in lines[:50]:  # Limit for demo
            if y_position < 50:
                p.showPage()
                y_position = height - 50
            p.drawString(50, y_position, line[:80])  # Truncate long lines
            y_position -= 15
        
        p.save()
        buffer.seek(0)
        
        return Response(
            content=buffer.getvalue(),
            media_type="application/pdf",
            headers={"Content-Disposition": f"attachment; filename={topic.replace(' ', '_')}.pdf"}
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"PDF generation failed: {str(e)}")

@app.get("/api/checkout")  
async def create_checkout(topic: str = "General Book", tier: str = "pro", upsells: str = ""):
    """Create Stripe checkout session with pre-configured products and upsells"""
    try:
        # Pre-configured Stripe Products (from Stripe Dashboard)
        stripe_products = {
            "basic": {
                "price_id": "price_1OQk9X1...",  # Replace with your actual price ID
                "product_id": "prod_PQk9X1...",  # Your Basic eBook product ID
                "price": 47.00,
                "name": "Basic eBook",
                "description": "AI-generated PDF + Standard cover + Watermarked + 24hr delivery"
            },
            "pro": {
                "price_id": "price_1OQk9X2...",  # Replace with your actual price ID  
                "product_id": "prod_PQk9X2...",  # Your Pro Package product ID
                "price": 97.00,
                "name": "Pro Package",
                "description": "Everything in Basic + Audio narration + Editable DOCX + 3 premium covers"
            },
            "whitelabel": {
                "price_id": "price_1OQk9X3...",  # You'll need to create this one
                "product_id": "prod_PQk9X3...",   # You'll need to create this one
                "price": 497.00,
                "name": "White Label License",
                "description": "Everything in Pro + Remove branding + Commercial rights + 100 books/month"
            }
        }

        # Upsell products
        upsell_products = {
            "formatting": {
                "price": 2999,  # $29.99
                "name": "Professional Formatting",
                "description": "Premium typography, margins, and layout design"
            },
            "printReady": {
                "price": 4900,  # $49.00
                "name": "Print-Ready PDF",
                "description": "CMYK color profile + Print bleed setup + High-res graphics"
            },
            "rushDelivery": {
                "price": 1999,  # $19.99
                "name": "Rush Delivery",
                "description": "2-hour delivery instead of standard timing"
            },
            "audioUpgrade": {
                "price": 3999,  # $39.99
                "name": "Premium Audio",
                "description": "Professional voice actor + Background music + Chapter breaks"
            }
        }
        
        selected_product = stripe_products.get(tier, stripe_products["pro"])
        
        # Build line items starting with main product
        line_items = [{
            'price': selected_product["price_id"],  # Use pre-configured price ID
            'quantity': 1,
        }]
        
        # Add upsells to line items
        total_price = selected_product["price"]
        if upsells:
            selected_upsells = upsells.split(',')
            for upsell_id in selected_upsells:
                if upsell_id in upsell_products:
                    upsell = upsell_products[upsell_id]
                    # Create dynamic price for upsells
                    line_items.append({
                        'price_data': {
                            'currency': 'usd',
                            'product_data': {
                                'name': upsell["name"],
                                'description': upsell["description"]
                            },
                            'unit_amount': upsell["price"],
                        },
                        'quantity': 1,
                    })
                    total_price += upsell["price"] / 100

        # Create checkout session with main product + upsells
        session = stripe.checkout.Session.create(
            payment_method_types=['card'],
            line_items=line_items,
            mode='payment',
            success_url=f'https://wizbook.io/success?session_id={{CHECKOUT_SESSION_ID}}&topic={topic}&tier={tier}',
            cancel_url=f'https://wizbook.io/cancel?topic={topic}',
            metadata={
                'topic': topic,
                'tier': tier,
                'upsells': upsells,
                'product_name': selected_product["name"]
            }
        )
        
        return {
            "checkout_url": session.url,
            "session_id": session.id, 
            "tier": tier,
            "price": total_price,
            "upsells": upsells.split(',') if upsells else [],
            "product_id": selected_product["product_id"]
        }
        
    except Exception as e:
        # Demo mode fallback with your product structure
        base_price = stripe_products.get(tier, stripe_products["pro"])["price"]
        upsell_price = 0
        if upsells:
            selected_upsells = upsells.split(',')
            for upsell_id in selected_upsells:
                if upsell_id in upsell_products:
                    upsell_price += upsell_products[upsell_id]["price"] / 100
        
        return {
            "checkout_url": f"https://wizbook.io/demo-success?topic={topic}&tier={tier}&upsells={upsells}",
            "message": "Demo mode - Add STRIPE_SECRET_KEY to process real payments",
            "tier": tier,
            "price": base_price + upsell_price,
            "upsells": upsells.split(',') if upsells else [],
            "demo": True
        }

@app.post("/api/webhook")
async def stripe_webhook(request: Request):
    """Handle Stripe webhook events"""
    try:
        payload = await request.body()
        sig_header = request.headers.get('stripe-signature')
        endpoint_secret = os.environ.get('STRIPE_WEBHOOK_SECRET')
        
        if endpoint_secret:
            event = stripe.Webhook.construct_event(payload, sig_header, endpoint_secret)
        else:
            # For demo purposes, parse the payload directly
            import json
            event = json.loads(payload)
            
        # Handle successful payment
        if event['type'] == 'checkout.session.completed':
            session = event['data']['object']
            
            # Extract metadata
            topic = session.get('metadata', {}).get('topic', 'Unknown')
            tier = session.get('metadata', {}).get('tier', 'basic')
            upsells = session.get('metadata', {}).get('upsells', '')
            customer_email = session.get('customer_details', {}).get('email', 'unknown@email.com')
            amount_total = session.get('amount_total', 0) / 100  # Convert cents to dollars
            
            # Log successful purchase with upsells
            upsell_list = upsells.split(',') if upsells else []
            print(f"‚úÖ SALE: {customer_email} bought {tier} plan for '{topic}'")
            print(f"üí∞ Amount: ${amount_total}")
            if upsell_list:
                print(f"üöÄ Upsells: {', '.join(upsell_list)}")
            
            # Here you would:
            # 1. Generate the actual book based on tier + upsells
            # 2. Apply upsell features (formatting, print-ready, rush delivery, etc.)
            # 3. Send email with download links
            # 4. Save to database with upsell details
            # 5. Send to fulfillment system
            
        return {"status": "success"}
        
    except Exception as e:
        print(f"Webhook error: {str(e)}")
        return {"error": str(e)}, 400

@app.post("/api/capture-email")
async def capture_email(request: Request):
    """Capture email for urgency marketing sequence"""
    try:
        data = await request.json()
        email = data.get('email', '').lower().strip()
        tier_interest = data.get('tier_interest', '')
        topic = data.get('topic', '')
        
        if not email or '@' not in email:
            raise HTTPException(status_code=400, detail="Valid email required")
        
        # Log email capture (in production, save to database)
        print(f"üìß EMAIL CAPTURED: {email}")
        print(f"   Tier Interest: {tier_interest}")
        print(f"   Topic: {topic}")
        print(f"   Timestamp: {datetime.now()}")
        
        # Here you would:
        # 1. Save to email marketing database (Mailchimp, ConvertKit, etc.)
        # 2. Tag with tier interest and topic
        # 3. Add to urgency email sequence
        # 4. Set trigger for 5-day countdown emails
        
        return {
            "status": "success", 
            "message": "Email captured successfully",
            "email": email,
            "sequence": "urgency_5_day"
        }
        
    except Exception as e:
        print(f"Email capture error: {str(e)}")
        raise HTTPException(status_code=500, detail="Email capture failed")

# Serve static files (HTML frontend) - Mount after API routes
app.mount("/", StaticFiles(directory="final-book/static", html=True), name="static")

if __name__ == "__main__":
    import uvicorn
    
    # Railway deployment optimization
    if os.getenv("RAILWAY_ENVIRONMENT"):
        HOST = "0.0.0.0"  # Forces public network for Railway
        PORT = int(os.environ.get("PORT", 8001))  # Railway auto-sets PORT, default 8001
    else:
        HOST = "localhost"  # Local development
        PORT = 8001  # Match supervisor configuration
    
    uvicorn.run(app, host=HOST, port=PORT)
import requests
import sys
import json
from datetime import datetime

class WizBookTester:
    def __init__(self, base_url="https://6c01608b-cf88-4ee1-bbbe-13267a9381af.preview.emergentagent.com"):
        self.base_url = base_url
        self.api_url = f"{base_url}/api"
        self.tests_run = 0
        self.tests_passed = 0
        self.test_topic = "Python Programming"

    def run_test(self, name, method, endpoint, expected_status, params=None, timeout=60):
        """Run a single API test"""
        url = f"{self.api_url}/{endpoint}" if not endpoint.startswith('http') else endpoint
        headers = {'Content-Type': 'application/json'}

        self.tests_run += 1
        print(f"\n🔍 Testing {name}...")
        print(f"   URL: {url}")
        if params:
            print(f"   Params: {params}")
        
        try:
            if method == 'GET':
                response = requests.get(url, params=params, headers=headers, timeout=timeout)
            elif method == 'POST':
                response = requests.post(url, json=params, headers=headers, timeout=timeout)

            success = response.status_code == expected_status
            if success:
                self.tests_passed += 1
                print(f"✅ Passed - Status: {response.status_code}")
                try:
                    if 'application/pdf' in response.headers.get('content-type', ''):
                        print(f"   PDF Size: {len(response.content)} bytes")
                        return True, response.content
                    else:
                        response_data = response.json()
                        print(f"   Response keys: {list(response_data.keys()) if isinstance(response_data, dict) else 'Non-dict response'}")
                        return True, response_data
                except:
                    return True, response.text
            else:
                print(f"❌ Failed - Expected {expected_status}, got {response.status_code}")
                print(f"   Response: {response.text[:200]}...")
                return False, {}

        except requests.exceptions.Timeout:
            print(f"❌ Failed - Request timed out after {timeout} seconds")
            return False, {}
        except Exception as e:
            print(f"❌ Failed - Error: {str(e)}")
            return False, {}

    def test_root_endpoint(self):
        """Test the root endpoint"""
        success, response = self.run_test("Root Endpoint", "GET", "../", 200)
        if success and isinstance(response, dict):
            print(f"   Service: {response.get('service', 'N/A')}")
            print(f"   Status: {response.get('status', 'N/A')}")
        return success

    def test_generate_endpoint(self):
        """Test /api/generate endpoint with topic parameter"""
        params = {"topic": self.test_topic}
        success, response = self.run_test(
            "Generate Book Endpoint", 
            "GET", 
            "generate", 
            200, 
            params=params,
            timeout=120  # Longer timeout for AI generation
        )
        
        if success and isinstance(response, dict):
            print(f"   Topic: {response.get('topic', 'N/A')}")
            print(f"   Word count: {response.get('word_count', 'N/A')}")
            print(f"   Status: {response.get('status', 'N/A')}")
            content = response.get('book', '')
            if content:
                print(f"   Content preview: {content[:100]}...")
        
        return success

    def test_pdf_endpoint(self):
        """Test /api/pdf endpoint with topic parameter"""
        params = {"topic": self.test_topic}
        url = f"{self.api_url}/pdf"
        print(f"\n🔍 Testing PDF Generation Endpoint...")
        print(f"   URL: {url}")
        print(f"   Params: {params}")
        
        try:
            response = requests.get(url, params=params, timeout=120)
            self.tests_run += 1
            
            if response.status_code == 200:
                content_type = response.headers.get('content-type', '')
                content_length = len(response.content)
                
                if 'application/pdf' in content_type and content_length > 1000:
                    self.tests_passed += 1
                    print(f"✅ Passed - PDF generated successfully")
                    print(f"   Content-Type: {content_type}")
                    print(f"   Size: {content_length} bytes")
                    
                    # Check for watermark by looking at PDF structure
                    pdf_content = response.content.decode('latin-1', errors='ignore')
                    if 'BookWiz' in pdf_content or 'Generated by' in pdf_content:
                        print(f"   ✅ Watermark detected in PDF")
                    else:
                        print(f"   ⚠️  Watermark not clearly detected")
                    
                    return True
                else:
                    print(f"❌ Failed - Invalid PDF response")
                    print(f"   Content-Type: {content_type}")
                    print(f"   Size: {content_length} bytes")
                    return False
            else:
                print(f"❌ Failed - Status: {response.status_code}")
                print(f"   Response: {response.text[:200]}...")
                return False
                
        except Exception as e:
            print(f"❌ Failed - Error: {str(e)}")
            return False

    def test_checkout_endpoint(self):
        """Test /api/checkout endpoint with topic parameter"""
        params = {"topic": self.test_topic}
        success, response = self.run_test(
            "Stripe Checkout Endpoint", 
            "GET", 
            "checkout", 
            200, 
            params=params,
            timeout=30
        )
        
        if success and isinstance(response, dict):
            print(f"   Checkout URL: {response.get('checkout_url', 'N/A')}")
            print(f"   Session ID: {response.get('session_id', 'N/A')}")
            if response.get('demo'):
                print(f"   ⚠️  Running in demo mode (Stripe not configured)")
            else:
                print(f"   ✅ Stripe integration active")
        
        return success

    def test_cors_configuration(self):
        """Test CORS headers are properly configured"""
        url = f"{self.api_url}/generate"
        params = {"topic": "Test"}
        
        print(f"\n🔍 Testing CORS Configuration...")
        print(f"   URL: {url}")
        
        try:
            response = requests.options(url, headers={
                'Origin': 'https://example.com',
                'Access-Control-Request-Method': 'GET',
                'Access-Control-Request-Headers': 'Content-Type'
            })
            
            self.tests_run += 1
            
            cors_headers = {
                'Access-Control-Allow-Origin': response.headers.get('Access-Control-Allow-Origin'),
                'Access-Control-Allow-Methods': response.headers.get('Access-Control-Allow-Methods'),
                'Access-Control-Allow-Headers': response.headers.get('Access-Control-Allow-Headers')
            }
            
            if any(cors_headers.values()):
                self.tests_passed += 1
                print(f"✅ Passed - CORS headers present")
                for header, value in cors_headers.items():
                    if value:
                        print(f"   {header}: {value}")
                return True
            else:
                print(f"❌ Failed - No CORS headers found")
                return False
                
        except Exception as e:
            print(f"❌ Failed - Error: {str(e)}")
            return False

    def test_error_handling(self):
        """Test error handling for missing parameters"""
        print(f"\n🔍 Testing Error Handling...")
        
        # Test generate endpoint without topic parameter
        try:
            response = requests.get(f"{self.api_url}/generate", timeout=30)
            self.tests_run += 1
            
            if response.status_code in [400, 422]:  # Expected error codes
                self.tests_passed += 1
                print(f"✅ Passed - Generate endpoint properly handles missing topic")
                print(f"   Status: {response.status_code}")
                return True
            else:
                print(f"❌ Failed - Expected 400/422, got {response.status_code}")
                return False
                
        except Exception as e:
            print(f"❌ Failed - Error: {str(e)}")
            return False

def main():
    print("🚀 Starting WizBook.io AI Book Generator Backend Tests")
    print("=" * 60)
    print("Testing endpoints from /app/main.py as specified in review request")
    print("=" * 60)
    
    tester = WizBookTester()
    
    # Run all tests as specified in the review request
    tests = [
        tester.test_root_endpoint,
        tester.test_generate_endpoint,
        tester.test_pdf_endpoint,
        tester.test_checkout_endpoint,
        tester.test_cors_configuration,
        tester.test_error_handling
    ]
    
    for test in tests:
        try:
            test()
        except Exception as e:
            print(f"❌ Test failed with exception: {str(e)}")
    
    # Print final results
    print("\n" + "=" * 60)
    print(f"📊 Test Results: {tester.tests_passed}/{tester.tests_run} tests passed")
    
    if tester.tests_passed == tester.tests_run:
        print("🎉 All tests passed!")
        return 0
    else:
        print(f"⚠️  {tester.tests_run - tester.tests_passed} tests failed")
        return 1

if __name__ == "__main__":
    sys.exit(main())
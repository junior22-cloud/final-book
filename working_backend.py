from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import Response
import uvicorn
import os
import logging
import json
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

app = FastAPI()

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
def root():
    return {"message": "AI Book Generator API", "status": "ready"}

@app.get("/api/test")
def test_endpoint():
    return {"status": "active", "version": "1.0", "endpoints": ["generate", "export", "checkout"]}

@app.post("/api/generate")
async def generate_content(request: Request):
    """Generate content from a prompt - simplified version"""
    try:
        data = await request.json()
        prompt = data.get("prompt", "Write a book")
        
        # For now, return high-quality fallback content
        # We can add AI integration once this works
        content = f"""# AI-Generated Content: {prompt}

## Professional Book Content

Thank you for your request! Here's your AI-generated content based on the prompt: "{prompt}"

### Chapter 1: Introduction
This is the beginning of your professional content. Our AI system has generated comprehensive material tailored to your specific request.

### Chapter 2: Core Concepts  
The main ideas and principles are outlined here with practical applications and real-world examples.

### Chapter 3: Implementation
Step-by-step guidance for putting these concepts into practice.

### Chapter 4: Advanced Techniques
More sophisticated approaches and professional tips.

### Chapter 5: Best Practices
Industry standards and proven methodologies.

### Chapter 6: Troubleshooting
Common issues and their solutions.

### Chapter 7: Future Considerations
Looking ahead and planning for growth.

### Chapter 8: Conclusion
Summary and next steps for continued success.

---

**Generated by AI Book Generator**
*Professional quality content in seconds*

Word Count: ~200 words (expandable to 1000+ words in full version)
Quality: Professional grade
Format: Ready for PDF conversion"""

        return {"text": content}
        
    except Exception as e:
        logging.error(f"Generation failed: {str(e)}")
        return {"text": f"Error generating content. Please try again."}

@app.post("/api/export") 
async def export_pdf(request: Request):
    """Simple PDF export - placeholder for now"""
    try:
        data = await request.json()
        text = data.get("text", "No content")
        
        # Simple PDF response (we'll add reportlab once this works)
        pdf_content = f"PDF Export of: {text[:100]}..."
        
        return Response(
            content=pdf_content.encode(),
            media_type="application/pdf",
            headers={"Content-Disposition": "attachment; filename=book.pdf"}
        )
        
    except Exception as e:
        return {"error": f"PDF export failed: {str(e)}"}

@app.post("/api/checkout")
async def create_checkout(request: Request):
    """Simple checkout placeholder"""
    try:
        data = await request.json()
        
        # Return mock session ID for testing
        return {"id": "cs_test_mock_session_id_12345"}
        
    except Exception as e:
        return {"error": f"Checkout failed: {str(e)}"}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)